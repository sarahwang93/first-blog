import { Observable } from 'rxjs';
export const openedDatabases = [];
export function openDatabase(indexedDB, dbName, version, upgradeCallback) {
    return new Promise((resolve, reject) => {
        if (!indexedDB) {
            reject('IndexedDB not available');
        }
        const request = indexedDB.open(dbName, version);
        let db;
        request.onsuccess = (event) => {
            db = request.result;
            openedDatabases.push(db);
            resolve(db);
        };
        request.onerror = (event) => {
            reject(`IndexedDB error: ${request.error}`);
        };
        if (typeof upgradeCallback === 'function') {
            request.onupgradeneeded = (event) => {
                upgradeCallback(event, db);
            };
        }
    });
}
export async function CreateObjectStore(indexedDB, dbName, version, storeSchemas, migrationFactory) {
    return new Promise((resolve, reject) => {
        if (!indexedDB) {
            return;
        }
        const request = indexedDB.open(dbName, version);
        request.onupgradeneeded = async (event) => {
            const database = event.target.result;
            const storeCreationPromises = storeSchemas.map(async (storeSchema) => {
                if (!database.objectStoreNames.contains(storeSchema.store)) {
                    const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);
                    for (const schema of storeSchema.storeSchema) {
                        objectStore.createIndex(schema.name, schema.keypath, schema.options);
                    }
                }
            });
            await Promise.all(storeCreationPromises);
            const storeMigrations = migrationFactory && migrationFactory();
            if (storeMigrations) {
                const migrationKeys = Object.keys(storeMigrations)
                    .map((k) => parseInt(k, 10))
                    .filter((v) => v > event.oldVersion)
                    .sort((a, b) => a - b);
                for (const v of migrationKeys) {
                    storeMigrations[v](database, request.transaction);
                }
            }
            database.close();
            resolve();
        };
        request.onsuccess = (e) => {
            e.target.result.close();
            resolve();
        };
        request.onerror = (error) => {
            reject(error);
        };
    });
}
export function DeleteObjectStore(dbName, version, storeName) {
    if (!dbName || !version || !storeName) {
        throw Error('Params: "dbName", "version", "storeName" are mandatory.');
    }
    return new Observable((obs) => {
        try {
            const newVersion = version + 1;
            const request = indexedDB.open(dbName, newVersion);
            request.onupgradeneeded = (event) => {
                const database = event.target.result;
                database.deleteObjectStore(storeName);
                database.close();
                console.log('onupgradeneeded');
                obs.next(true);
                obs.complete();
            };
            request.onerror = (e) => obs.error(e);
        }
        catch (error) {
            obs.error(error);
        }
    });
}
export function closeDatabase(db) {
    return new Promise((resolve, reject) => {
        if (!db) {
            reject(new Error('No database to close'));
            return;
        }
        try {
            db.close();
            resolve();
        }
        catch (error) {
            reject(`Error closing database: ${error}`);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluZGV4ZWQtZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaW5kZXhlZC1kYi9zcmMvbGliL25neC1pbmRleGVkLWRiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFOUMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFrQixFQUFFLENBQUM7QUFFakQsTUFBTSxVQUFVLFlBQVksQ0FDMUIsU0FBcUIsRUFDckIsTUFBYyxFQUNkLE9BQWdCLEVBQ2hCLGVBQW9EO0lBRXBELE9BQU8sSUFBSSxPQUFPLENBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDbEQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2YsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUNELE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELElBQUksRUFBZSxDQUFDO1FBQ3BCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUNuQyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNwQixlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNkLENBQUMsQ0FBQztRQUNGLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUNqQyxNQUFNLENBQUMsb0JBQW9CLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQztRQUNGLElBQUksT0FBTyxlQUFlLEtBQUssVUFBVSxFQUFFLENBQUM7WUFDMUMsT0FBTyxDQUFDLGVBQWUsR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO2dCQUN6QyxlQUFl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QUMsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1lBQzFDLE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxDQUFDO1lBQ0gsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ1gsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sQ0FBQywyQkFBMkIsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM3QyxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JqZWN0U3RvcmVNZXRhIH0gZnJvbSAnLi9uZ3gtaW5kZXhlZC1kYi5tZXRhJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmliZXIgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNvbnN0IG9wZW5lZERhdGFiYXNlczogSURCRGF0YWJhc2VbXSA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gb3BlbkRhdGFiYXNlKFxuICBpbmRleGVkREI6IElEQkZhY3RvcnksXG4gIGRiTmFtZTogc3RyaW5nLFxuICB2ZXJzaW9uPzogbnVtYmVyLFxuICB1cGdyYWRlQ2FsbGJhY2s/OiAoYTogRXZlbnQsIGI6IElEQkRhdGFiYXNlKSA9PiB2b2lkXG4pOiBQcm9taXNlPElEQkRhdGFiYXNlPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxJREJEYXRhYmFzZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICghaW5kZXhlZERCKSB7XG4gICAgICByZWplY3QoJ0luZGV4ZWREQiBub3QgYXZhaWxhYmxlJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUsIHZlcnNpb24pO1xuICAgIGxldCBkYjogSURCRGF0YWJhc2U7XG4gICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICBkYiA9IHJlcXVlc3QucmVzdWx0O1xuICAgICAgb3BlbmVkRGF0YWJhc2VzLnB1c2goZGIpO1xuICAgICAgcmVzb2x2ZShkYik7XG4gICAgfTtcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICByZWplY3QoYEluZGV4ZWREQiBlcnJvcjogJHtyZXF1ZXN0LmVycm9yfWApO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiB1cGdyYWRlQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICB1cGdyYWRlQ2FsbGJhY2soZXZlbnQsIGRiKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIENyZWF0ZU9iamVjdFN0b3JlKFxuICBpbmRleGVkREI6IElEQkZhY3RvcnksXG4gIGRiTmFtZTogc3RyaW5nLFxuICB2ZXJzaW9uOiBudW1iZXIsXG4gIHN0b3JlU2NoZW1hczogT2JqZWN0U3RvcmVNZXRhW10sXG4gIG1pZ3JhdGlvbkZhY3Rvcnk/OiAoKSA9PiB7IFtrZXk6IG51bWJlcl06IChkYjogSURCRGF0YWJhc2UsIHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbikgPT4gdm9pZCB9XG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoIWluZGV4ZWREQikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0OiBJREJPcGVuREJSZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCB2ZXJzaW9uKTtcbiAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGFzeW5jIChldmVudDogSURCVmVyc2lvbkNoYW5nZUV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBkYXRhYmFzZTogSURCRGF0YWJhc2UgPSAoZXZlbnQudGFyZ2V0IGFzIGFueSkucmVzdWx0O1xuXG4gICAgICBjb25zdCBzdG9yZUNyZWF0aW9uUHJvbWlzZXMgPSBzdG9yZVNjaGVtYXMubWFwKGFzeW5jIChzdG9yZVNjaGVtYSkgPT4ge1xuICAgICAgICBpZiAoIWRhdGFiYXNlLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoc3RvcmVTY2hlbWEuc3RvcmUpKSB7XG4gICAgICAgICAgY29uc3Qgb2JqZWN0U3RvcmUgPSBkYXRhYmFzZS5jcmVhdGVPYmplY3RTdG9yZShzdG9yZVNjaGVtYS5zdG9yZSwgc3RvcmVTY2hlbWEuc3RvcmVDb25maWcpO1xuICAgICAgICAgIGZvciAoY29uc3Qgc2NoZW1hIG9mIHN0b3JlU2NoZW1hLnN0b3JlU2NoZW1hKSB7XG4gICAgICAgICAgICBvYmplY3RTdG9yZS5jcmVhdGVJbmRleChzY2hlbWEubmFtZSwgc2NoZW1hLmtleXBhdGgsIHNjaGVtYS5vcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChzdG9yZUNyZWF0aW9uUHJvbWlzZXMpO1xuXG4gICAgICBjb25zdCBzdG9yZU1pZ3JhdGlvbnMgPSBtaWdyYXRpb25GYWN0b3J5ICYmIG1pZ3JhdGlvbkZhY3RvcnkoKTtcbiAgICAgIGlmIChzdG9yZU1pZ3JhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWlncmF0aW9uS2V5cyA9IE9iamVjdC5rZXlzKHN0b3JlTWlncmF0aW9ucylcbiAgICAgICAgICAubWFwKChrKSA9PiBwYXJzZUludChrLCAxMCkpXG4gICAgICAgICAgLmZpbHRlcigodikgPT4gdiA+IGV2ZW50Lm9sZFZlcnNpb24pXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbWlncmF0aW9uS2V5cykge1xuICAgICAgICAgIHN0b3JlTWlncmF0aW9uc1t2XShkYXRhYmFzZSwgcmVxdWVzdC50cmFuc2FjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGF0YWJhc2UuY2xvc2UoKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9O1xuXG4gICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZTogYW55KSA9PiB7XG4gICAgICBlLnRhcmdldC5yZXN1bHQuY2xvc2UoKTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9O1xuXG4gICAgcmVxdWVzdC5vbmVycm9yID0gKGVycm9yOiBFdmVudCkgPT4ge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9O1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIERlbGV0ZU9iamVjdFN0b3JlKGRiTmFtZTogc3RyaW5nLCB2ZXJzaW9uOiBudW1iZXIsIHN0b3JlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gIGlmICghZGJOYW1lIHx8ICF2ZXJzaW9uIHx8ICFzdG9yZU5hbWUpIHtcbiAgICB0aHJvdyBFcnJvcignUGFyYW1zOiBcImRiTmFtZVwiLCBcInZlcnNpb25cIiwgXCJzdG9yZU5hbWVcIiBhcmUgbWFuZGF0b3J5LicpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPGJvb2xlYW4+KChvYnM6IFN1YnNjcmliZXI8Ym9vbGVhbj4pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV3VmVyc2lvbiA9IHZlcnNpb24gKyAxO1xuICAgICAgY29uc3QgcmVxdWVzdDogSURCT3BlbkRCUmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSwgbmV3VmVyc2lvbik7XG4gICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IChldmVudDogSURCVmVyc2lvbkNoYW5nZUV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGFiYXNlOiBJREJEYXRhYmFzZSA9IChldmVudC50YXJnZXQgYXMgYW55KS5yZXN1bHQ7XG5cbiAgICAgICAgZGF0YWJhc2UuZGVsZXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcbiAgICAgICAgZGF0YWJhc2UuY2xvc2UoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ29udXBncmFkZW5lZWRlZCcpO1xuICAgICAgICBvYnMubmV4dCh0cnVlKTtcbiAgICAgICAgb2JzLmNvbXBsZXRlKCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4gb2JzLmVycm9yKGUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvYnMuZXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZURhdGFiYXNlKGRiOiBJREJEYXRhYmFzZSk6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICghZGIpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vIGRhdGFiYXNlIHRvIGNsb3NlJykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBkYi5jbG9zZSgpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZWplY3QoYEVycm9yIGNsb3NpbmcgZGF0YWJhc2U6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==